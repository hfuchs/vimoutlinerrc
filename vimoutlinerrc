" 2009-08-11, Created by Hagen Fuchs <code@hfuchs.net>
"
" The definitions here define a complete link-suite (whatever /that/ is)
" for Vimoutliner.  To define a target, just place square brackets
" around it: '[target]'.  To link to it, simply write '[-> target]' or
" just '[> target]' and hit '<localleader>j'.  Nifty, I think.
"
" In addition, there's a slightly hacky autocommand definition here that
" I need to protect myself from the constant re-evaluation of foldexpr.


" --- Command Bindings
"  ,,j  -  Jump from origin to target
nmap <buffer> <localleader>j :call JumpToTargetID()<CR>

" 2012-03-16, Autocommand to update folds on /serious/ idle time (one
" hour).
set updatetime=3600000
autocmd CursorHold * call SwitchFoldmethod()


" --- Function Definitions
" Hint: Reload in running Vimoutliner session with ':source ~/.vimoutlinerrc'.

" SwitchFoldmethod {{{1
" Hacky method of avoiding the costly evaluation foldexpr on every
" keystroke by switching to manual folding for most of the time (folds
" will /not/ be updated) and update all folds after a certain idle
" period (see updatetime above).
function! SwitchFoldmethod()
    echomsg "Switching to expression-based folding."
    set foldmethod=expr
    " update folds - necessary to kickstart reevaluation.
    normal! zx
    echomsg "Switching back to manual folding."
    set foldmethod=manual
endfunction
" }}}1

" JumpToTargetID {{{1
" Implements a interlinking feature for Vimoutliner.  If you are on
" a line containing [> string], cursor positioned inside the brackets,
" then calling this function will jump to the (nearest) occurence of
" [string].  Really simple but rather effective.
function! JumpToTargetID()
    " For links that spread over two lines, we need to take the previous
    " and next line in consideration and join these with a special
    " separator (l:sep).
    let l:sep     = '!:-:!'
    let l:lines   = join( getline( line('.') - 1 , line('.') + 1 ), l:sep )
    let l:pattern = '\m\[-\?>\s*\([^\[\]]\+\)\]'
    let l:links   = [[]]
    let l:timeout = 1000

    " Ugly special test necessary with the multi-line approach: Don't
    " jump if there's no bracket character on /this/ line (would
    " otherwise jump also if only the adjacent lines had links).
    if match(getline('.'), '[\[\]]') == -1
        echo "No ID found on this line."
        return
    endif

    " Find all occurences of pattern in string and note their position.
    let l:i = 1
    while l:i
        let l:begin = match(l:lines, l:pattern, 0, l:i)
        if l:begin != -1
            let l:begin -= len(l:sep)
            " The two substitute()s simply normalize multi-line links
            " and create valid target IDs (I can't figure out how to
            " search() later without magic, so I quote everything here).
            let l:end    = matchend(l:lines, l:pattern, 0, l:i) - len(l:sep)
            let l:id     = matchstr(l:lines, l:pattern, 0, l:i)
            let l:target = substitute(l:id, l:sep.'\s*:\?\s\+', ' ', '')
            let l:target = substitute(l:target, l:pattern, '\\\[\1\\\]', '')
            let l:links += [[ l:begin, l:end, l:target ]]
            let l:i += 1
            " For debugging only:
            "echo "Id: " l:id "Target: " l:target "Links: " l:links
        else
            break
        endif
    endwhile

    " If the list is still empty, quit now.
    if l:links == [[]]
        echo "No ID found on this line."
        return
    else
        call remove(l:links, 0)
    endif

    " Check whether the cursor is placed inside of one of the links and
    " jump there if so (search()'s 's' parameter sets a jump mark to get
    " back with ^o).
    let l:cursorpos = getpos(".")[2] + strlen( getline( line('.') - 1 ) )
    for l:link in l:links
        if index(range(l:link[0], l:link[1]), l:cursorpos) != -1
            if search(l:link[2], 'sw', 0, l:timeout) == 0
                echo "Target ID not found!"
            endif
            return
        endif
    endfor

    " If the cursor's positioned elsewhere, use the last jumpID.
    if search(l:links[-1][2], 'sw', 0, l:timeout) == 0
        echo "Target ID not found!"
    endif
endfunction


" vim:ft=vim:foldmethod=marker
